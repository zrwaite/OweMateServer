type User {
	id: ID!
	username: String!
	hash: String!
	display_name: String!
	created_at: String!
	invoice_ids: [ID!]!
	invoices: [Invoice!]!
	payment_ids: [ID!]!
	payments: [Payment!]!
	contact_ids: [ID!]!
	contacts: [User!]!
}

type UserResult {
	success: Boolean!
	user: User
	errors: [String!]
}

type UsersResult {
	success: Boolean!
	users: [User!]
	errors: [String!]
}

type UserAuthResult {
	success: Boolean!
	user: User
	token: String!
	errors: [String!]
}

type Invoice {
	id: ID!
	created_by_username: String!
	created_by: User!
	invoiced_to_username: String!
	invoiced_to: User!
	amount: Float!
	created_at: String!
}

type InvoiceResult {
	success: Boolean!
	invoice: Invoice
	errors: [String!]
}

type Payment {
	id: ID!
	created_by_username: String!
	created_by: User!
	paid_to_username: String!
	paid_to: User!
	amount: Float!
	created_at: String!
}

type PaymentResult {
	success: Boolean!
	payment: Payment
	errors: [String!]
}

type Result {
	success: Boolean!
	errors: [String!]
}

input UserInput {
	username: String!
	password: String!
}

input InvoiceInput {
	created_by_username: ID!
	invoiced_to_username: ID!
	amount: Float!
}

input PaymentInput {
	created_by_username: ID!
	paid_to_username: ID!
	amount: Float!
}

type Query {
	user(username: String!): UserResult!
	getFilteredUsers(partialUsername: String!): UsersResult!
}

type Mutation {
	createUser(input: UserInput!): UserAuthResult!
	login(input: UserInput!): UserAuthResult!
	deleteUser(username: String!): Result!
	createInvoice(input: InvoiceInput!): InvoiceResult!
	createPayment(input: PaymentInput!): PaymentResult!
	addContact(username: String!, contact_username: String!): Result!
	removeContact(username: String!, contact_username: String!): Result!
}
